# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".coverage",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
 
]

# Assume Python 3.13
target-version = "py313"

fix = false
indent-width = 4
line-length = 88

[lint]

extend-select = [
    "E",    # Pycodestyle errors (style issues)
    "W",    # Pycodestyle warnings (style issues)
    "C90",  # McCabe – complexity metric for functions
    "I",    # isort – import ordering checks
    "N",    # PEP8 Naming – naming conventions
    "D",    # Pydocstyle – docstring formatting
    "UP",   # Pyupgrade – upgrades syntax to newer Python versions
    "YTT",  # Flake8-2020 – checks for Python 2020 best practices
    "ANN",  # Flake8-annotations – enforces type annotation style
    "ASYNC",# Flake8-async – checks async/await usage
    "S",    # Flake8-bandit – security issues
    "BLE",  # Flake8-blind-except – flags bare excepts
    "FBT",  # Flake8-boolean-trap – potential pitfalls with booleans
    "B",    # Flake8-bugbear – common bug patterns
    "A",    # Flake8-builtins – misuse of Python built-in names
    "COM",  # Flake8-commas – trailing/comma issues
    # "CPY",  # Flake8-copyright – copyright header checks
    "C4",   # Flake8-comprehensions – best practices in comprehensions
    "DTZ",  # Flake8-datetimez – requires timezone-aware datetime objects
    "T10",  # Flake8-debugger – debugger statements (e.g. pdb)
    "DJ",   # Flake8-django – Django-specific conventions
    "EM",   # Flake8-errmsg – error message style
    "EXE",  # Flake8-executable – executable file checks
    "FA",   # Flake8-future-annotations – future import for annotations
    "ISC",  # Flake8-implicit-str-concat – warns on implicit string concatenation
    "ICN",  # Flake8-import-conventions – enforces conventional import aliases
    "LOG",  # Flake8-logging – proper logging usage
    "G",    # Flake8-logging-format – logging format string issues
    "INP",  # Flake8-no-pep420 – warns against non-PEP420 namespace usage
    "PIE",  # Flake8-pie – Python improvement suggestions
    # "T20",  # Flake8-print – disallows print statements
    "PYI",  # Flake8-pyi – checks for type stub (.pyi) consistency
    "PT",   # Flake8-pytest-style – pytest best practices
    "Q",    # Flake8-quotes – enforces quote style consistency
    "RSE",  # Flake8-raise – proper raise statement usage
    "RET",  # Flake8-return – return statement issues
    "SLF",  # Flake8-self – flags instance methods that don't use self
    "SLOT", # Flake8-slots – suggests use of __slots__ where appropriate
    "SIM",  # Flake8-simplify – code simplification hints
    "TID",  # Flake8-tidy-imports – enforces specific import styles (e.g., no relative imports)
    "TC",   # Flake8-type-checking – proper import of typing in type checks
    "INT",  # Flake8-gettext – checks for proper internationalization usage
    "ARG",  # Flake8-unused-arguments – flags unused function arguments
    "PTH",  # Flake8-use-pathlib – encourages pathlib over os.path
    "TD",   # Flake8-todos – flags TODO comments
    "FIX",  # Flake8-fixme – flags FIXME comments
    # "ERA",  # Eradicate – detects commented-out code (potentially dangerous)
    "PD",   # Pandas-vet – checks pandas-specific code practices
    "PGH",  # Pygrep-hooks – custom grep hooks for linting
    "PL",   # Pylint – integration with Pylint conventions
    "TRY",  # Tryceratops – try/except usage suggestions
    "FLY",  # Flynt – f-string conversion suggestions
    "NPY",  # NumPy-specific rules – ensures NumPy coding standards
    "FAST", # FastAPI – FastAPI-specific linting rules
    "AIR",  # Airflow – Airflow-specific linting rules
    "PERF", # Perflint – performance-related checks
    "FURB", # Refurb – rules for code refurbishment
    # "DOC",  # Pydoclint – docstring linting and consistency
    "RUF",  # Ruff-specific rules – additional Ruff checks
]

ignore = [
    "E501",  # Pycodestyle - line too long
    "D1",    # Pydocstyle - missing docstring in public module, class, or function
    "FBT003", # Flake8-boolean-trap - boolean position value in function call
    "D203",  # Pydocstyle - one blank line required before class docstring
    "D212",  # Pydocstyle - summary line should be immediately after the opening quotes.
    "D401",  # Pydocstyle - Checks for docstring first lines that are not in an imperative mood.
    "S311",  # Flake8-bandit - Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "PERF401", # Perflint - Checks for for loops that can be replaced by a list comprehension.
    "RET504", # Flake8-return - Checks for variable assignments that immediately precede a return of the assigned variable.
    "FA102", # Flake8-future-annotations - Missing `from __future__ import annotations`, but uses PEP 604 union
    "D415", # First line should end with a period, questionmark ...
    "COM812",
    "D400", # First line should end with a period, questionmark ...
    "PD901", # qAvoid using the generic variable name `df` for DataFrames
    "G004", # Logging statement uses f-string
    "TRY401", # Redundant exception object included in `logging.exception` call
    "TRY400", # Use `logging.exception` instead of `logging.error`
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function definition
    "TD003", #  Missing issue link for this TODO
    "SIM103", # Return the negated condition directly
    "PLR0913", # Too many arguments in function definition
    "BLE001", #Do not catch blind exception: Exception
    "B904", # Within an `except` clause, raise exceptions with `raise ... from err` or
    "UP040", #Type alias `LabelVisibilityType` uses `TypeAlias` annotation instead of the `type` keyword
]

[lint.per-file-ignores]
"**/tests/**/*.py" = [
    # at least this three should be fine in tests:
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    # The below are debateable
    "PLR2004", # Magic value used in comparison, ...
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
]


[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"